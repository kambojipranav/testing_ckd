import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier

# -------------------- LANGUAGE SUPPORT --------------------
lang_options = {'English': 'en', 'Hindi': 'hi', 'Telugu': 'te'}
language = st.sidebar.selectbox("üåê Choose Language", list(lang_options.keys()))
lang_code = lang_options[language]

translations = {
    'en': {
        'title': "Chronic Kidney Disease Predictor",
        'subtitle': "Enter patient details below to assess the risk",
        'age': "Age", 'bp': "Blood Pressure", 'sg': "Specific Gravity",
        'al': "Albumin", 'su': "Sugar", 'bgr': "Blood Glucose Random", 
        'bu': "Blood Urea", 'sc': "Serum Creatinine", 'sod': "Sodium", 
        'pot': "Potassium", 'hemo': "Hemoglobin", 'pcv': "Packed Cell Volume", 
        'wc': "WBC Count", 'rc': "RBC Count", 'rbc': "Red Blood Cells", 
        'pc': "Pus Cell", 'pcc': "Pus Cell Clumps", 'ba': "Bacteria", 
        'htn': "Hypertension", 'dm': "Diabetes Mellitus", 'cad': "Coronary Artery Disease", 
        'appet': "Appetite", 'pe': "Pedal Edema", 'ane': "Anemia",
        'predict': "üîç Predict", 'risk': "Kidney Disease Risk",
        'low': "üü¢ Low Risk ‚Äî Regular monitoring advised.",
        'med': "üü° Moderate Risk ‚Äî Recommend follow-up tests.",
        'high': "üî¥ High Risk ‚Äî Urgent medical attention recommended.",
        'precaution': "üìù Precaution: Manage diabetes and blood pressure, follow a kidney-friendly diet, stay active, and avoid smoking."
    },
    'hi': {
        'title': "‡§ï‡•ç‡§∞‡•â‡§®‡§ø‡§ï ‡§ï‡§ø‡§°‡§®‡•Ä ‡§∞‡•ã‡§ó ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®",
        'subtitle': "‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡§æ ‡§Ü‡§ï‡§≤‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç",
        'age': "‡§Ü‡§Ø‡•Å", 'bp': "‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™", 'sg': "‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ó‡•Å‡§∞‡•Å‡§§‡•ç‡§µ‡§æ‡§ï‡§∞‡•ç‡§∑‡§£",
        'al': "‡§è‡§≤‡§¨‡•Å‡§Æ‡§ø‡§®", 'su': "‡§∂‡•Å‡§ó‡§∞", 'bgr': "‡§¨‡•ç‡§≤‡§° ‡§ó‡•ç‡§≤‡•Ç‡§ï‡•ã‡§ú", 
        'bu': "‡§¨‡•ç‡§≤‡§° ‡§Ø‡•Ç‡§∞‡§ø‡§Ø‡§æ", 'sc': "‡§∏‡•Ä‡§∞‡§Æ ‡§ï‡•ç‡§∞‡§ø‡§è‡§ü‡§ø‡§®‡§ø‡§®", 'sod': "‡§∏‡•ã‡§°‡§ø‡§Ø‡§Æ", 
        'pot': "‡§™‡•ã‡§ü‡•á‡§∂‡§ø‡§Ø‡§Æ", 'hemo': "‡§π‡•Ä‡§Æ‡•ã‡§ó‡•ç‡§≤‡•ã‡§¨‡§ø‡§®", 'pcv': "‡§™‡•à‡§ï‡•ç‡§° ‡§∏‡•á‡§≤ ‡§µ‡•â‡§≤‡•ç‡§Ø‡•Ç‡§Æ", 
        'wc': "‡§°‡§¨‡•ç‡§≤‡•ç‡§Ø‡•Ç‡§¨‡•Ä‡§∏‡•Ä ‡§ó‡§ø‡§®‡§§‡•Ä", 'rc': "‡§Ü‡§∞‡§¨‡•Ä‡§∏‡•Ä ‡§ó‡§ø‡§®‡§§‡•Ä", 'rbc': "‡§≤‡§æ‡§≤ ‡§∞‡§ï‡•ç‡§§ ‡§ï‡•ã‡§∂‡§ø‡§ï‡§æ‡§è‡§Ç", 
        'pc': "‡§™‡•Å‡§∏ ‡§∏‡•á‡§≤", 'pcc': "‡§™‡•Å‡§∏ ‡§ï‡•ç‡§≤‡§Ç‡§™", 'ba': "‡§¨‡•à‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§Ø‡§æ", 
        'htn': "‡§π‡§æ‡§à ‡§¨‡•ç‡§≤‡§° ‡§™‡•ç‡§∞‡•á‡§∂‡§∞", 'dm': "‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π", 'cad': "‡§ï‡•ã‡§∞‡•ã‡§®‡§∞‡•Ä ‡§Ü‡§∞‡•ç‡§ü‡§∞‡•Ä ‡§°‡§ø‡§ú‡•Ä‡§ú", 
        'appet': "‡§≠‡•Ç‡§ñ", 'pe': "‡§™‡•à‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•Ç‡§ú‡§®", 'ane': "‡§Ö‡§®‡•Ä‡§Æ‡§ø‡§Ø‡§æ",
        'predict': "üîç ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç", 'risk': "‡§ï‡§ø‡§°‡§®‡•Ä ‡§∞‡•ã‡§ó ‡§ú‡•ã‡§ñ‡§ø‡§Æ",
        'low': "üü¢ ‡§ï‡§Æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‚Äî ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§",
        'med': "üü° ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‚Äî ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ï‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§",
        'high': "üî¥ ‡§â‡§ö‡•ç‡§ö ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‚Äî ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§",
        'precaution': "üìù ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä: ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π ‡§î‡§∞ ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™ ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡§ø‡§°‡§®‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§Ç, ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§π‡•á‡§Ç ‡§î‡§∞ ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§"
    },
    'te': {
        'title': "‡∞¶‡±Ä‡∞∞‡±ç‡∞ò‡∞ï‡∞æ‡∞≤ ‡∞ï‡∞ø‡∞°‡±ç‡∞®‡±Ä ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ",
        'subtitle': "‡∞∞‡∞ø‡∞∏‡±ç‡∞ï‡±ç ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞∏‡±á‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
        'age': "‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å", 'bp': "‡∞¨‡±ç‡∞≤‡∞°‡±ç ‡∞™‡±ç‡∞∞‡±Ü‡∞ú‡∞∞‡±ç", 'sg': "‡∞∏‡±ç‡∞™‡±Ü‡∞∏‡∞ø‡∞´‡∞ø‡∞ï‡±ç ‡∞ó‡±ç‡∞∞‡∞æ‡∞µ‡∞ø‡∞ü‡±Ä",
        'al': "‡∞Ö‡∞≤‡±ç‡∞¨‡±ç‡∞Ø‡±Ç‡∞Æ‡∞ø‡∞®‡±ç", 'su': "‡∞∑‡±Å‡∞ó‡∞∞‡±ç", 'bgr': "‡∞¨‡±ç‡∞≤‡∞°‡±ç ‡∞ó‡±ç‡∞≤‡±Ç‡∞ï‡±ã‡∞ú‡±ç", 
        'bu': "‡∞¨‡±ç‡∞≤‡∞°‡±ç ‡∞Ø‡±Ç‡∞∞‡∞ø‡∞Ø‡∞æ", 'sc': "‡∞∏‡±Ä‡∞∞‡∞Æ‡±ç ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø‡∞æ‡∞ü‡∞ø‡∞®‡∞ø‡∞®‡±ç", 'sod': "‡∞∏‡±ã‡∞°‡∞ø‡∞Ø‡∞Ç", 
        'pot': "‡∞™‡±ä‡∞ü‡∞æ‡∞∑‡∞ø‡∞Ø‡∞Ç", 'hemo': "‡∞π‡∞ø‡∞Æ‡±ã‡∞ó‡±ç‡∞≤‡±ã‡∞¨‡∞ø‡∞®‡±ç", 'pcv': "‡∞™‡±ç‡∞Ø‡∞æ‡∞ï‡±ç‡∞°‡±ç ‡∞∏‡±Ü‡∞≤‡±ç ‡∞µ‡∞æ‡∞≤‡±ç‡∞Ø‡±Ç‡∞Æ‡±ç", 
        'wc': "‡∞°‡∞¨‡±ç‡∞≤‡±ç‡∞Ø‡±Ç‡∞¨‡±Ä‡∞∏‡±Ä ‡∞ï‡±å‡∞Ç‡∞ü‡±ç", 'rc': "‡∞Ü‡∞∞‡±ç‡∞¨‡±Ä‡∞∏‡±Ä ‡∞ï‡±å‡∞Ç‡∞ü‡±ç", 'rbc': "‡∞é‡∞∞‡±ç‡∞∞ ‡∞∞‡∞ï‡±ç‡∞§‡∞ï‡∞£‡∞æ‡∞≤‡±Å", 
        'pc': "‡∞™‡∞∏‡±ç ‡∞∏‡±Ü‡∞≤‡±ç", 'pcc': "‡∞™‡∞∏‡±ç ‡∞ï‡±ç‡∞≤‡∞Ç‡∞™‡±ç‡∞∏‡±ç", 'ba': "‡∞¨‡∞æ‡∞ï‡±ç‡∞ü‡±Ä‡∞∞‡∞ø‡∞Ø‡∞æ", 
        'htn': "‡∞π‡±à ‡∞¨‡±Ä‡∞™‡±Ä", 'dm': "‡∞°‡∞Ø‡∞æ‡∞¨‡±Ü‡∞ü‡∞ø‡∞∏‡±ç", 'cad': "‡∞ï‡±ã‡∞∞‡±ã‡∞®‡∞∞‡±Ä ‡∞Ü‡∞∞‡±ç‡∞ü‡∞∞‡±Ä ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø", 
        'appet': "‡∞Ü‡∞π‡∞æ‡∞∞‡∞Ç ‡∞á‡∞∑‡±ç‡∞ü‡∞Ç", 'pe': "‡∞ï‡∞æ‡∞≥‡±ç‡∞≥ ‡∞µ‡∞æ‡∞™‡±Å", 'ane': "‡∞Ö‡∞®‡±Ä‡∞Æ‡∞ø‡∞Ø‡∞æ",
        'predict': "üîç ‡∞Ö‡∞Ç‡∞ö‡∞®‡∞æ ‡∞µ‡±á‡∞Ø‡∞ø", 'risk': "‡∞ï‡∞ø‡∞°‡±ç‡∞®‡±Ä ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞Ç",
        'low': "üü¢ ‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞Ç ‚Äî ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£‡∞Ç‡∞ó‡∞æ ‡∞™‡∞∞‡±ç‡∞Ø‡∞µ‡±á‡∞ï‡±ç‡∞∑‡∞£ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç.",
        'med': "üü° ‡∞Æ‡∞ß‡±ç‡∞Ø‡∞∏‡±ç‡∞• ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞Ç ‚Äî ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑‡∞≤‡±Å ‡∞ö‡±á‡∞Ø‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞µ‡∞æ‡∞≤‡∞ø.",
        'high': "üî¥ ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞¶‡∞Ç ‚Äî ‡∞µ‡±Ü‡∞Ç‡∞ü‡∞®‡±á ‡∞µ‡±à‡∞¶‡±ç‡∞Ø ‡∞∏‡±á‡∞µ‡∞≤‡±Å ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç.",
        'precaution': "üìù ‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞≤‡±Å: ‡∞∑‡±Å‡∞ó‡∞∞‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞¨‡±Ä‡∞™‡±Ä ‡∞®‡∞ø‡∞Ø‡∞Ç‡∞§‡±ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞ï‡∞ø‡∞°‡±ç‡∞®‡±Ä‡∞ï‡∞ø ‡∞Ö‡∞®‡±Å‡∞ï‡±Ç‡∞≤‡∞Æ‡±à‡∞® ‡∞Ü‡∞π‡∞æ‡∞∞‡∞Ç ‡∞§‡±Ä‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞ö‡±Å‡∞∞‡±Å‡∞ï‡±Å‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡±ä‡∞ó‡∞§‡∞æ‡∞ó‡∞°‡∞Ç ‡∞®‡∞ø‡∞µ‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø."
    }
}

def t(key):
    return translations[lang_code].get(key, key)

# -------------------- PAGE CONFIG --------------------
st.set_page_config(page_title="CKD Predictor", page_icon="üß¨", layout="centered")

# -------------------- DATA PREP --------------------
df = pd.read_csv("kidney_disease.csv")
df.dropna(inplace=True)

encode_map = {
    'yes': 1, 'no': 0,
    'normal': 1, 'abnormal': 0,
    'present': 1, 'notpresent': 0,
    'good': 1, 'poor': 0
}
df.replace(encode_map, inplace=True)

X = df[[
    'age', 'bp', 'sg', 'al', 'su', 'rbc', 'pc', 'pcc', 'ba', 'bgr',
    'bu', 'sc', 'sod', 'pot', 'hemo', 'pcv', 'wc', 'rc',
    'htn', 'dm', 'cad', 'appet', 'pe', 'ane']]
y = LabelEncoder().fit_transform(df['classification'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)

model = RandomForestClassifier()
model.fit(X_train_scaled, y_train)

# -------------------- FORM --------------------
st.title(t("title"))
st.caption(t("subtitle"))

with st.form("prediction_form"):
    age = st.slider(t("age"), 1, 100, 45)
    bp = st.slider(t("bp"), 50, 180, 80)
    sg = st.selectbox(t("sg"), [1.005, 1.010, 1.015, 1.020, 1.025])
    al = st.slider(t("al"), 0, 5, 1)
    su = st.slider(t("su"), 0, 5, 0)
    bgr = st.number_input(t("bgr"), 70, 490, 120)
    bu = st.number_input(t("bu"), 1.0, 200.0, 50.0)
    sc = st.number_input(t("sc"), 0.1, 15.0, 1.2)
    sod = st.number_input(t("sod"), 120.0, 150.0, 135.0)
    pot = st.number_input(t("pot"), 2.0, 7.0, 4.5)
    hemo = st.number_input(t("hemo"), 5.0, 20.0, 13.5)
    pcv = st.number_input(t("pcv"), 20.0, 60.0, 41.0)
    wc = st.number_input(t("wc"), 2000.0, 20000.0, 8500.0)
    rc = st.number_input(t("rc"), 2.0, 6.5, 5.2)
    rbc = st.selectbox(t("rbc"), ["normal", "abnormal"])
    pc = st.selectbox(t("pc"), ["normal", "abnormal"])
    pcc = st.selectbox(t("pcc"), ["present", "notpresent"])
    ba = st.selectbox(t("ba"), ["present", "notpresent"])
    htn = st.selectbox(t("htn"), ["yes", "no"])
    dm = st.selectbox(t("dm"), ["yes", "no"])
    cad = st.selectbox(t("cad"), ["yes", "no"])
    appet = st.selectbox(t("appet"), ["good", "poor"])
    pe = st.selectbox(t("pe"), ["yes", "no"])
    ane = st.selectbox(t("ane"), ["yes", "no"])

    submitted = st.form_submit_button(t("predict"))

if submitted:
    input_data = pd.DataFrame([[age, bp, sg, al, su, rbc, pc, pcc, ba, bgr,
                                 bu, sc, sod, pot, hemo, pcv, wc, rc, htn, dm,
                                 cad, appet, pe, ane]],
                               columns=X.columns)
    input_data.replace(encode_map, inplace=True)
    input_scaled = scaler.transform(input_data)
    prediction = model.predict_proba(input_scaled)[0][1] * 100

    st.subheader("üîî " + t("risk"))
    st.metric(t("risk"), f"{prediction:.2f}%")

    if prediction < 20:
        st.success(t("low"))
    elif prediction < 60:
        st.warning(t("med"))
    else:
        st.error(t("high"))
        st.info(t("precaution"))
